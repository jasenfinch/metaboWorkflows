[{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Jasen Finch  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. metaboWorkflows Copyright (C) 2019 Jasen Finch This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"metaboWorkflows","text":"Metabolomics encompasses wide range techniques includes mass spectrometry based fingerprinting profiling. analysis data requires number steps includes spectral processing, data pre-treatment, quality control, data mining visualisation order extract relevant biological information. goal metaboWorkflows provide project directory templates range mass spectrometry based metabolomic techniques. generated project template directories can easily extended user meet needs particular analysis goals. project templates utilise number tools promote efficient reproducible analysis, agnostic actual analysis R code. tools include: targets - R focused pipeline toolkit efficiently maintaining reproducible analysis workflows. renv - R package project-local R package dependency management maintaining reproducible R package environments. git - widely used, open-source distributed version control system. docker - enables containerization operating system (OS) level environments. can used define reproducible OS environments workflow analysis can performed. use tools optional highly encouraged, recommended user least familiar basic use targets based pipelines outlined . three steps using metaboWorkflows generate workflow project template directory. follows: input - define input data source workflow define - define workflow steps based metabolomic technique project directory structure generate - generate workflow project directory introduction outline steps, provide overview example workflow project directory execute one workflows. begin, firstly load package:","code":"library(metaboWorkflows) #>  #> Attaching package: 'metaboWorkflows' #> The following object is masked from 'package:base': #>  #>     args"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"workflow-input","dir":"Articles","previous_headings":"","what":"Workflow input","title":"metaboWorkflows","text":"Prior defining workflow, user needs know sort input type workflow use. metaboWorkflows currently supports two types: remote data obtained use grover RESTful web API providing vector .mzML file paths tibble sample information.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"grover-api-input","dir":"Articles","previous_headings":"Workflow input","what":"grover API input","title":"metaboWorkflows","text":"grover R package provides framework hosting RESTful web APIs remote access conversion raw metabolomics data .mzML format. type input can declared providing host information grover API inputGrover function. shows example fictitious grover API host.","code":"workflow_input <- inputGrover(instrument = 'An_instrument',                               directory = 'Experiment_directory',                               host = 'a.grover.host',                               port = 80,                               auth = '1234') print(workflow_input) #> Grover API workflow input  #> Instrument: An_instrument  #> Directory: Experiment_directory  #> Host: a.grover.host  #> Port: 80  #> Authentication: 1234"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"file-path-input","dir":"Articles","previous_headings":"Workflow input","what":"File path input","title":"metaboWorkflows","text":"raw mass spectrometry .mzML format data files locally available sample set, file paths tibble sample information can provided workflow input. shows example file path input FIE-HRMS fingerprinting data set Brachypodium distachyon ecotype comparisons available metaboData package. example input used throughout rest introduction.","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information) print(workflow_input) #> File path workflow input #> # files: 68"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"define-a-workflow","dir":"Articles","previous_headings":"","what":"Define a workflow","title":"metaboWorkflows","text":"Workflow definition simple requires input definition outlined previous section, name metabolomic technique project name. return currently available metabolomic workflow templates, use: example use FIE-HRMS fingerprinting template project named Example project. project template options can also specified point output directory path use renv R package management. See ?defineWorkflow details. Printing resulting workflow definition provide information defined workflow. shown , workflow definition contains 37 targets. targets individual steps analysis pipeline. full workflow graph, showing relationships targets, can plotted shown : package also contains functionality modifying extending targets available workflow templates. outlined Workflow customisation extension vignette.","code":"availableWorkflows() #> [1] \"FIE-HRMS fingerprinting\" \"NSI-HRMS fingerprinting\" #> [3] \"RP-LC-HRMS profiling\"    \"NP-LC-HRMS profiling\"    #> [5] \"GC-MS profiling\" workflow_definition <- defineWorkflow(   input = workflow_input,   workflow = 'FIE-HRMS fingerprinting',   project_name = 'Example project' ) print(workflow_definition) #> Workflow:  FIE-HRMS fingerprinting  #>  #> Project name: Example project  #> Directory path: .  #> Use renv: TRUE  #> Docker: TRUE  #> GitHub repository: FALSE  #> Private repository: FALSE  #> GitHub Actions: FALSE  #> Force creation: FALSE  #>  #> File path workflow input #> # files: 68 #>  #> # targets: 37 glimpse(workflow_definition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"generate-a-workflow-project-directory","dir":"Articles","previous_headings":"","what":"Generate a workflow project directory","title":"metaboWorkflows","text":"final step generation project directory defined workflow. generate project directory specified directory path. additional start argument can used automatically open project directory RStudio IDE project generation.","code":"generateWorkflow(workflow_definition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"the-project-directory","dir":"Articles","previous_headings":"","what":"The project directory","title":"metaboWorkflows","text":"shows overview generated Example project project directory: presence components dependent defined project options input type selected workflow definition. , brief overview important components given. Dockerfile - can used build suitable docker image workflow can executed within containerised OS environment. R/functions - Scripts containing additional functions can placed . R/targets - directory contains scripts target definitions module workflow. R/utils.R - contains code related loading packages setting package options. _targets.R - script sources necessary scripts project directory contains formal definition workflow. See information file. data - workflow input data stored. contents directory differ depending whether grover API file path input type selected. exports - outputs workflow directed including HTML output .csv data table outputs. misc - miscellaneous scripts files can placed . renv.lock - lock file used renv package capture state R package library used project. report/report.Rmd - R Markdown report summarising workflow results. ’s output saved exports. run.R - script can used execute workflow. See section information.","code":"Example_project ├── Dockerfile ├── Example_project.Rproj ├── R │   ├── functions │   ├── targets │   │   ├── correlations_targets.R │   │   ├── input_targets.R │   │   ├── modelling_targets.R │   │   ├── molecular_formula_assignment_targets.R │   │   ├── pre_treatment_targets.R │   │   ├── report_targets.R │   │   └── spectral_processing_targets.R │   └── utils.R ├── README.md ├── _targets.R ├── data │   ├── file_paths.txt │   └── runinfo.csv ├── exports ├── misc ├── renv │   ├── activate.R │   ├── library │   ├── local │   ├── settings.dcf │   └── staging ├── renv.lock ├── report │   └── report.Rmd └── run.R"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/metaboWorkflows.html","id":"executing-an-analysis-workflow","dir":"Articles","previous_headings":"","what":"Executing an analysis workflow","title":"metaboWorkflows","text":"number ways workflow can executed project directory generated. targets package provides information topic . recommended method opening project RStudio IDE running workflow job using rstudioapi package run.R script follows:","code":"rstudioapi::jobRunScript('run.R')"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Workflow customisation and extension","text":"vignette cover utilities provided user modify workflow targets prior generating project directories. users likely need functionality workflows can easily edited _targets.R file project generation. However, need workflow targets modified routinely, package provides functionality programmatic customisation extension. already familiar basics use package, see Introduction vignette details get started. vignette cover aspects makes good workflow targets. information topic, see targets package documenation. Firstly, load package:","code":"library(metaboWorkflows) #>  #> Attaching package: 'metaboWorkflows' #> The following object is masked from 'package:base': #>  #>     args"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"generating-custom-workflow-targets","dir":"Articles","previous_headings":"","what":"Generating custom workflow targets","title":"Workflow customisation and extension","text":"target() function can used easy programmatic definition workflow target. following defines tar_target called a_target, execute R expression 1 + 1, includes persistent memory argument preceding comment. creates S4 object class Target contains target definition. Printing workflow_target display R code target definition: object can modified needed using accessor methods Target class. instance, following modify target R code: See ?`Target-accessors` details available accessor methods. recommended source package names, functions used R command, specified using pkg::function notation. ensure dependency packages can detected installed renv project directory generation. custom targets either plot table output included R Markdown report output, plot summary included respectively target name ensure relevant R Markdown code chunks generated report. table caption targets prefixed summary generated target name summary, replacing _ space. Targets prefixed parameters results also generate R markdown report output chunks print information target object.","code":"workflow_target <- target('a_target',                           1 + 1,                           type = 'tar_target',                           args = list(memory = 'persistent'),                            comment = 'A target') workflow_target #> ## A target #> tar_target( #>   a_target, #>   1 + 1, #>   memory = \"persistent\" #> ) command(workflow_target) <- rlang::expr(1 * 2)  workflow_target #> ## A target #> tar_target( #>   a_target, #>   1 * 2, #>   memory = \"persistent\" #> )"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"modifying-existing-workflow-template-targets","dir":"Articles","previous_headings":"","what":"Modifying existing workflow template targets","title":"Workflow customisation and extension","text":"can first define example workflow: Printing workflow_definition provides overview definition.","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project') workflow_definition #> Workflow:  FIE-HRMS fingerprinting  #>  #> Project name: Example project  #> Directory path: .  #> Use renv: TRUE  #> Docker: TRUE  #> GitHub repository: FALSE  #> Private repository: FALSE  #> GitHub Actions: FALSE  #> Force creation: FALSE  #>  #> File path workflow input #> # files: 68 #>  #> # targets: 37"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"inspecting-a-workflow","dir":"Articles","previous_headings":"Modifying existing workflow template targets","what":"Inspecting a workflow","title":"Workflow customisation and extension","text":"modifying workflow, essential properly inspect resulting pipeline, due interdependence workflow targets, package contains number tools based available targets package, facilitate user inspect workflow definitions prior project generation. tibble containing information targets within workflow definition can returned using: workflow network graph can plotted visualise links individual targets. useful modifying workflow allows integrity visually inspected, ensuring targets correctly connected. workflow can also validated check potential problems. error warning thrown problems encountered.","code":"manifest(workflow_definition) #> # A tibble: 42 × 3 #>    name                                    command                       pattern #>    <chr>                                   <chr>                         <chr>   #>  1 parameters_correlations                 \"metabolyseR::analysisParame… NA      #>  2 parameters_molecular_formula_assignment \"MFassign::assignmentParamet… NA      #>  3 sample_information_file                 \"\\\"data/runinfo.csv\\\"\"        NA      #>  4 file_paths_list                         \"\\\"data/file_paths.txt\\\"\"     NA      #>  5 sample_information                      \"readr::read_csv(sample_info… NA      #>  6 mzML_files                              \"readLines(file_paths_list)\"  NA      #>  7 mzML                                    \"mzML_files\"                  map(mz… #>  8 parameters_spectral_processing          \"binneR::detectParameters(mz… NA      #>  9 results_spectral_processing             \"binneR::binneRlyse(mzML, sa… NA      #> 10 plot_TIC                                \"binneR::plotTIC(results_spe… NA      #> # … with 32 more rows glimpse(workflow_definition) validate(workflow_definition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"workflow-structure","dir":"Articles","previous_headings":"Modifying existing workflow template targets","what":"Workflow structure","title":"Workflow customisation and extension","text":"template workflow targets arranged modules. modules allow user specify groups related targets. also specify individual section headings R Markdown report output. shows modules defined example workflow. workflow target definitions stored list, nested modules. list can accessed using targets() method. shows targets available input module.","code":"modules(workflow_definition) #> [1] \"input\"                        \"spectral_processing\"          #> [3] \"pre_treatment\"                \"molecular_formula_assignment\" #> [5] \"modelling\"                    \"correlations\"                 #> [7] \"report\" targets(workflow_definition)$input #> $file_paths_list #> ## Retrieve data file paths #> tar_file( #>   file_paths_list, #>   \"data/file_paths.txt\" #> ) #>  #> $mzML #> ## Track individual data files #> tar_files( #>   mzML, #>   readLines(file_paths_list) #> ) #>  #> $sample_information_file #> ## Sample information file path #> tar_file( #>   sample_information_file, #>   \"data/runinfo.csv\" #> ) #>  #> $sample_information #> ## Parse sample information #> tar_target( #>   sample_information, #>   readr::read_csv(sample_information_file) #> )"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"modifying-individual-workflow-targets","dir":"Articles","previous_headings":"Modifying existing workflow template targets","what":"Modifying individual workflow targets","title":"Workflow customisation and extension","text":"number convenience methods available facilitate modifying individual targets within workflow defnintion. methods include: targetReplace() targetRemove() targetAdd() See ?`workflow-edit` details methods. simple example, following remove mzML target input module workflow definition. modified workflow can visualised. can seen , file_paths_list target now isolated. suggest generated workflow project may function expected pipeline errors encountered.","code":"workflow_definition <- targetRemove(workflow_definition,                                  'input',                                  'mzML') glimpse(workflow_definition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/articles/workflow-customisation.html","id":"modifying-workflow-modules","dir":"Articles","previous_headings":"Modifying existing workflow template targets","what":"Modifying workflow modules","title":"Workflow customisation and extension","text":"Similarly modifying workflow targets, also methods modifying whole module groups targets. methods include: moduleReplace() modulesRemove() modulesKeep() moduleAdd() See ?`workflow-edit` details target methods. example, following replace spectral_processing module list group alternative targets. visualising modified workflow definition check resulting pipeline. can seen , now number targets orphaned replacement module, including replacement targets, targets connected modules. modification, unlikely generated workflow project definition successfully executed user errors encountered. modifications needed ensure valid pipeline generated.","code":"workflow_definition <- moduleReplace(workflow_definition,                                      'spectral_processing',                                      list(                                        a_target = target('a_target',                                               1 + 1,                                               args = list(memory = 'persistent'),                                               comment = 'A target')                                       )) glimpse(workflow_definition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jasen Finch. Author, maintainer.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Finch J (2022). metaboWorkflows: Workflow Project Templates Metabolomics Analyses. R package version 0.9.5, https://jasenfinch.github.io/metaboWorkflows.","code":"@Manual{,   title = {metaboWorkflows: Workflow Project Templates for Metabolomics Analyses},   author = {Jasen Finch},   year = {2022},   note = {R package version 0.9.5},   url = {https://jasenfinch.github.io/metaboWorkflows}, }"},{"path":"https://jasenfinch.github.io/metaboWorkflows/index.html","id":"metaboworkflows","dir":"","previous_headings":"","what":"Workflow Project Templates for Metabolomics Analyses","title":"Workflow Project Templates for Metabolomics Analyses","text":"Workflow Project Templates Metabolomics Analyses","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Workflow Project Templates for Metabolomics Analyses","text":"package provides reproducible workflow project templates metabolomics analyses using hrm R package ecosystem. project templates utilise number tools promote efficient reproducible analysis, agnostic actual analysis R code. tools include: targets - R focused pipeline toolkit efficiently maintaining reproducible analysis workflows. renv - R package project-local R package dependency management maintaining reproducible R package environments. git - widely used, open-source distributed version control system. docker - enables containerization operating system (OS) level environments. can used define reproducible OS environments workflow analysis can performed. Project templates available following metabolomic techniques: FIE-HRMS fingerprinting NSI-HRMS fingerprinting RP-LC-HRMS profiling NP-LC-HRMS profiling GC-MS profiling","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Workflow Project Templates for Metabolomics Analyses","text":"metaboWorkflows package can installed GitHub using following:","code":"devtools::install_github('jasenfinch/metaboWorkflows',build_vignettes = TRUE)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Workflow Project Templates for Metabolomics Analyses","text":"package documentation can browsed online https://jasenfinch.github.io/metaboWorkflows/. first time using metaboWorkflows see Introduction vignette information get started. believe ’ve found bug metaboWorkflows, please file bug (, possible, reproducible example) https://github.com/jasenfinch/metaboWorkflows/issues.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/FilePathInput-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"FilePathInput get and set accessors — filePaths","title":"FilePathInput get and set accessors — filePaths","text":"Get set methods FilePathInput S4 class.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/FilePathInput-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FilePathInput get and set accessors — filePaths","text":"","code":"filePaths(x)  # S4 method for FilePathInput filePaths(x)  filePaths(x) <- value  # S4 method for FilePathInput filePaths(x) <- value  sampleInformation(x)  # S4 method for FilePathInput sampleInformation(x)  sampleInformation(x) <- value  # S4 method for FilePathInput sampleInformation(x) <- value"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/FilePathInput-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FilePathInput get and set accessors — filePaths","text":"x S4 object class FilePathInput value value set","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/FilePathInput-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FilePathInput get and set accessors — filePaths","text":"","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  ## Return the input file paths if (FALSE) { filePaths(workflow_input) } ## Set the input file paths filePaths(workflow_input) <- c('a_file.mzML')  ## Return the sample information  sampleInformation(workflow_input) #> # A tibble: 68 × 7 #>    fileOrder injOrder fileName   batch block name    class #>        <dbl>    <dbl> <chr>      <dbl> <dbl> <chr>   <chr> #>  1         1       64 1.mzML.gz      1     5 ABR1_1  ABR1  #>  2         2       40 10.mzML.gz     1     3 ABR1_10 ABR1  #>  3         3       52 11.mzML.gz     1     4 ABR1_11 ABR1  #>  4         4       67 12.mzML.gz     1     5 ABR1_12 ABR1  #>  5         5       32 13.mzML.gz     1     3 ABR1_13 ABR1  #>  6         6       53 14.mzML.gz     1     4 ABR1_14 ABR1  #>  7         7        4 15.mzML.gz     1     1 ABR1_15 ABR1  #>  8         8       34 16.mzML.gz     1     3 ABR5_1  ABR5  #>  9         9       38 17.mzML.gz     1     3 ABR5_2  ABR5  #> 10        10       59 18.mzML.gz     1     5 ABR5_3  ABR5  #> # … with 58 more rows  ## Set the sample information sampleInformation(workflow_input) <- tibble::tibble(fileName = 'a_file.mzML')"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/FilePathInput-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for storing file path input information — FilePathInput-class","title":"S4 class for storing file path input information — FilePathInput-class","text":"S4 class storing file path type workflow input information.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/FilePathInput-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for storing file path input information — FilePathInput-class","text":"file_paths character vector file paths sample_information tibble containing sample information","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/GroverInput-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"GroverInput get and set methods — instrument","title":"GroverInput get and set methods — instrument","text":"Get set methods GroverInput S4 class.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/GroverInput-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GroverInput get and set methods — instrument","text":"","code":"instrument(x)  # S4 method for GroverInput instrument(x)  instrument(x) <- value  # S4 method for GroverInput instrument(x) <- value  directory(x)  # S4 method for GroverInput directory(x)  directory(x) <- value  # S4 method for GroverInput directory(x) <- value  host(x)  # S4 method for GroverInput host(x)  host(x) <- value  # S4 method for GroverInput host(x) <- value  port(x)  # S4 method for GroverInput port(x)  port(x) <- value  # S4 method for GroverInput port(x) <- value  auth(x)  # S4 method for GroverInput auth(x)  auth(x) <- value  # S4 method for GroverInput auth(x) <- value"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/GroverInput-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GroverInput get and set methods — instrument","text":"x S4 object class GroverInput value value set","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/GroverInput-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GroverInput get and set methods — instrument","text":"","code":"workflow_input <- inputGrover(instrument = 'An_instrument',                               directory = 'Experiment_directory',                               host = 'a.grover.host',                               port = 80,                               auth = '1234')  ## Return input instrument instrument(workflow_input) #> [1] \"An_instrument\"  ## Set the input instrument instrument(workflow_input) <- 'A_different_instrument'  ## Return input directory directory(workflow_input) #> [1] \"Experiment_directory\"  ## Set the input directory directory(workflow_input) <- 'Another_experiment'  ## Return input host host(workflow_input) #> [1] \"a.grover.host\"  ## Set the input host host(workflow_input) <- 'a.new.host'  ## Return the input port port(workflow_input) #> [1] 80  ## Set the input port port(workflow_input) <- 81  ## Return the input auth auth(workflow_input) #> [1] \"1234\"  ## Set the input auth auth(workflow_input) <- 'abcd'"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/GroverInput-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class for storing grover input information — GroverInput-class","title":"S4 class for storing grover input information — GroverInput-class","text":"S4 class storing grover type workflow input information.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/GroverInput-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class for storing grover input information — GroverInput-class","text":"instrument analytical instrument name directory experiment directory name host grover API host address port grover API host port auth grover API host authentication code","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Project-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Project class get and set methods — projectName","title":"Project class get and set methods — projectName","text":"Get set methods Project S4 class.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Project-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project class get and set methods — projectName","text":"","code":"projectName(x)  # S4 method for Project projectName(x)  projectName(x) <- value  # S4 method for Project projectName(x) <- value  path(x)  # S4 method for Project path(x)  path(x) <- value  # S4 method for Project path(x) <- value  renv(x)  # S4 method for Project renv(x)  renv(x) <- value  # S4 method for Project renv(x) <- value  docker(x)  # S4 method for Project docker(x)  docker(x) <- value  # S4 method for Project docker(x) <- value  github(x)  # S4 method for Project github(x)  github(x) <- value  # S4 method for Project github(x) <- value  private(x)  # S4 method for Project private(x)  private(x) <- value  # S4 method for Project private(x) <- value  githubActions(x)  # S4 method for Project githubActions(x)  githubActions(x) <- value  # S4 method for Project githubActions(x) <- value  force(x)  # S4 method for Project force(x)  force(x) <- value  # S4 method for Project force(x) <- value"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Project-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project class get and set methods — projectName","text":"x S4 object class Project value value set","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Project-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project class get and set methods — projectName","text":"","code":"workflow_project <- defineProject('A metabolomics project')  ## Return the project name projectName(workflow_project) #> [1] \"A metabolomics project\"  ## Set the project name projectName(workflow_project) <- 'A new name'  ## Return the project directory path path(workflow_project) #> [1] \".\"  ## Set the project directory path path(workflow_project) <- './a_directory'  ## Return the project renv option renv(workflow_project) #> [1] TRUE  ## Set the project renv option renv(workflow_project) <- FALSE  ## Return the project docker option docker(workflow_project) #> [1] TRUE  ## Set the project docker option docker(workflow_project) <- FALSE  ## Return the project github option github(workflow_project) #> [1] FALSE  ## Set the project github option github(workflow_project) <- TRUE  ## Return the project private option private(workflow_project) #> [1] FALSE  ## Set the project private option private(workflow_project) <- TRUE  ## Return the project github actions option githubActions(workflow_project) #> [1] FALSE  ## Set the project github actions option githubActions(workflow_project) <- TRUE  ## Return the project force option force(workflow_project) #> [1] FALSE  ## Set the project force option force(workflow_project) <- TRUE"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Project-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class to store project directory definitions — Project-class","title":"S4 class to store project directory definitions — Project-class","text":"S4 class store workflow project directory definitions.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Project-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class to store project directory definitions — Project-class","text":"project_name project name path project directory path renv add infrastructure reproducible R package environment management renv package docker creation project docker infrastructure github creation GitHub repository private private GitHub repository github_actions creation GitHub actions infrastructure force force project creation project directory already exists","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Target-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Target class get and set methods — name","title":"Target class get and set methods — name","text":"Get set methods Target S4 class.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Target-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target class get and set methods — name","text":"","code":"name(x)  # S4 method for Target name(x)  name(x) <- value  # S4 method for Target name(x) <- value  command(x)  # S4 method for Target command(x)  command(x) <- value  # S4 method for Target command(x) <- value  type(x)  # S4 method for Target type(x)  type(x) <- value  # S4 method for Target type(x) <- value  args(x)  # S4 method for Target args(x)  args(x) <- value  # S4 method for Target args(x) <- value  comment(x)  # S4 method for Target comment(x)  comment(x) <- value  # S4 method for Target comment(x) <- value  code(x)  # S4 method for Target code(x)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Target-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target class get and set methods — name","text":"x S4 object class Target value value set","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Target-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target class get and set methods — name","text":"","code":"workflow_target <- target('a_target',                           1 + 1,                           args = list(memory = 'persistent'),                            comment = 'A target')  ## Return the target name name(workflow_target) #> [1] \"a_target\"  ## Set the target name name(workflow_target) <- 'a_new_name'  ## Return the target R code command(workflow_target) #> [[1]] #> 1 + 1 #>   ## Set the target R code command(workflow_target) <- rlang::expr(1 * 2)  ## Return the target type type(workflow_target) #> [1] \"tar_target\"  ## Set the target type type(workflow_target) <- 'tar_file'  ## Return the list target arguments args(workflow_target) #> $memory #> [1] \"persistent\" #>   ## Set the target arguments args(workflow_target) <- list(error = 'continue')  ## Return the target comment comment(workflow_target) #> [1] \"A target\"  ## Set the workflow comment comment(workflow_target) <- 'A new comment'"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Target-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class to store target a definition — Target-class","title":"S4 class to store target a definition — Target-class","text":"S4 class storing workflow target definition.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Target-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class to store target a definition — Target-class","text":"name target name command R code run target string type target archetype args arguments pass specified target archetype","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Workflow-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow class get and set methods — type,Workflow-method","title":"Workflow class get and set methods — type,Workflow-method","text":"Get set methods Workflow S4 class.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Workflow-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow class get and set methods — type,Workflow-method","text":"","code":"# S4 method for Workflow type(x)  # S4 method for Workflow type(x) <- value  input(x)  # S4 method for Workflow input(x)  input(x) <- value  # S4 method for Workflow input(x) <- value  targets(x)  # S4 method for Workflow targets(x)  targets(x) <- value  # S4 method for Workflow targets(x) <- value  modules(x)  # S4 method for Workflow modules(x)  # S4 method for Workflow filePaths(x)  # S4 method for Workflow filePaths(x) <- value  # S4 method for Workflow sampleInformation(x)  # S4 method for Workflow sampleInformation(x) <- value  # S4 method for Workflow instrument(x)  # S4 method for Workflow instrument(x) <- value  # S4 method for Workflow directory(x)  # S4 method for Workflow directory(x) <- value  # S4 method for Workflow host(x)  # S4 method for Workflow host(x) <- value  # S4 method for Workflow port(x)  # S4 method for Workflow port(x) <- value  # S4 method for Workflow auth(x)  # S4 method for Workflow auth(x) <- value"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Workflow-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow class get and set methods — type,Workflow-method","text":"x S4 object class Workflow value value set","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/Workflow-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow class get and set methods — type,Workflow-method","text":"","code":"## Define a workflow with file path input file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project')  ## Return the workflow type type(workflow_definition) #> [1] \"FIE-HRMS fingerprinting\"  ## Set the workflow type type(workflow_definition) <- \"RP-LC-HRMS profiling\"   ## Return the workflow input input(workflow_definition) #> File path workflow input #> # files: 68  ## Set the workflow input if (FALSE) { input(workflow_definition) <- inputGrover(instrument = 'An_instrument',                                           directory = 'Experiment_directory',                                           host = 'a.grover.host',                                           port = 80,                                           auth = '1234') }  ## Return the workflow targets for the input module targets(workflow_definition)$input #> $file_paths_list #> ## Retrieve data file paths #> tar_file( #>   file_paths_list, #>   \"data/file_paths.txt\" #> ) #>  #> $mzML #> ## Track individual data files #> tar_files( #>   mzML, #>   readLines(file_paths_list) #> ) #>  #> $sample_information_file #> ## Sample information file path #> tar_file( #>   sample_information_file, #>   \"data/runinfo.csv\" #> ) #>  #> $sample_information #> ## Parse sample information #> tar_target( #>   sample_information, #>   readr::read_csv(sample_information_file) #> ) #>   ## Set the workflow targets targets(workflow_definition) <- list(                                      a_module = list(                                      a_target =  target('a_target',                                                         1 + 1,                                                         args = list(memory = 'persistent'),                                                          comment = 'A target')                                                )                                      )  ## Return the workflow modules modules(workflow_definition) #> [1] \"a_module\"  ## Return the workflow file paths if (FALSE) { filePaths(workflow_definition) }  ## Set the workflow file paths filePaths(workflow_definition) <- 'a_file.mzML'  ## Return the workflow sample information sampleInformation(workflow_definition) #> # A tibble: 68 × 7 #>    fileOrder injOrder fileName   batch block name    class #>        <dbl>    <dbl> <chr>      <dbl> <dbl> <chr>   <chr> #>  1         1       64 1.mzML.gz      1     5 ABR1_1  ABR1  #>  2         2       40 10.mzML.gz     1     3 ABR1_10 ABR1  #>  3         3       52 11.mzML.gz     1     4 ABR1_11 ABR1  #>  4         4       67 12.mzML.gz     1     5 ABR1_12 ABR1  #>  5         5       32 13.mzML.gz     1     3 ABR1_13 ABR1  #>  6         6       53 14.mzML.gz     1     4 ABR1_14 ABR1  #>  7         7        4 15.mzML.gz     1     1 ABR1_15 ABR1  #>  8         8       34 16.mzML.gz     1     3 ABR5_1  ABR5  #>  9         9       38 17.mzML.gz     1     3 ABR5_2  ABR5  #> 10        10       59 18.mzML.gz     1     5 ABR5_3  ABR5  #> # … with 58 more rows  ## Set the workflow sample information sampleInformation(workflow_definition) <- tibble::tibble(fileName = 'a_file.mzML')  ## Define a workflow with grover input workflow_input <- inputGrover(instrument = 'An_instrument',                               directory = 'Experiment_directory',                               host = 'a.grover.host',                               port = 80,                               auth = '1234')  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project')  ## Return the workflow instrument instrument(workflow_definition) #> [1] \"An_instrument\"  ## Set the workflow Instrument instrument(workflow_definition) <- 'A_different_instrument'  ## Return the workflow directory directory(workflow_definition) #> [1] \"Experiment_directory\"  ## Set the workflow directory directory(workflow_definition) <- 'Another_experiment'  ## Return the workflow host host(workflow_definition) #> [1] \"a.grover.host\"  ## Set the workflow_host host(workflow_definition) <- 'a.new.host'  ## Return the workflow port port(workflow_definition) #> [1] 80  ## Set the workflow port port(workflow_definition) <- 81  ## Return the workflow auth auth(workflow_definition) #> [1] \"1234\"  ## Set the workflow auth auth(workflow_definition) <- 'abcd'"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/availableWorkflows.html","id":null,"dir":"Reference","previous_headings":"","what":"Available workflows — availableWorkflows","title":"Available workflows — availableWorkflows","text":"Return available metabolomics workflows.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/availableWorkflows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available workflows — availableWorkflows","text":"","code":"availableWorkflows()"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/availableWorkflows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available workflows — availableWorkflows","text":"character vector available workflow names.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/availableWorkflows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Available workflows — availableWorkflows","text":"","code":"availableWorkflows() #> [1] \"FIE-HRMS fingerprinting\" \"NSI-HRMS fingerprinting\" #> [3] \"RP-LC-HRMS profiling\"    \"NP-LC-HRMS profiling\"    #> [5] \"GC-MS profiling\""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineProject.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a project directory — defineProject","title":"Define a project directory — defineProject","text":"Define project directory workflow","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a project directory — defineProject","text":"","code":"defineProject(   project_name,   path = \".\",   renv = TRUE,   docker = TRUE,   github = FALSE,   private = FALSE,   github_actions = FALSE,   force = FALSE )"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a project directory — defineProject","text":"project_name project name/title path target file path project directory renv add infrastructure reproducible R package environment management renv package docker TRUE/FALSE. Create project infrastructure building docker container compile project. github TRUE/FALSE. Create GitHub repository? private TRUE/FALSE. GitHub repository private? Evaluated argument github TRUE. github_actions TRUE/FALSE. Add Github actions infrastructure? Evaluated argument github TRUE. force force project creation project directory already exists","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineProject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a project directory — defineProject","text":"S4 object class Project.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineProject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a project directory — defineProject","text":"","code":"workflow_project <- defineProject('A metabolomics project')  workflow_project #> Project name: A metabolomics project  #> Directory path: .  #> Use renv: TRUE  #> Docker: TRUE  #> GitHub repository: FALSE  #> Private repository: FALSE  #> GitHub Actions: FALSE  #> Force creation: FALSE"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineWorkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a metabolomics workflow — defineWorkflow","title":"Define a metabolomics workflow — defineWorkflow","text":"Define metabolomics data analysis workflow given input type workflow name.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineWorkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a metabolomics workflow — defineWorkflow","text":"","code":"defineWorkflow(input, workflow, project_name, ...)  # S4 method for GroverInput defineWorkflow(input, workflow, project_name, ...)  # S4 method for FilePathInput defineWorkflow(input, workflow, project_name, ...)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineWorkflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a metabolomics workflow — defineWorkflow","text":"input S4 object class GroverInput FilePathInput workflow workflow name returned availableWorkflows() project_name project name ... arguments pass defineProject. See details.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineWorkflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a metabolomics workflow — defineWorkflow","text":"S4 object class Workflow","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineWorkflow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a metabolomics workflow — defineWorkflow","text":"project template options use R package renv R package management can also declared, passed defineProject(). See defineProject() documentation details options.","code":""},{"path":[]},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/defineWorkflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a metabolomics workflow — defineWorkflow","text":"","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project') workflow_definition #> Workflow:  FIE-HRMS fingerprinting  #>  #> Project name: Example project  #> Directory path: .  #> Use renv: TRUE  #> Docker: TRUE  #> GitHub repository: FALSE  #> Private repository: FALSE  #> GitHub Actions: FALSE  #> Force creation: FALSE  #>  #> File path workflow input #> # files: 68 #>  #> # targets: 37"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/generateWorkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a workflow project directory — generateWorkflow","title":"Generate a workflow project directory — generateWorkflow","text":"Generate workflow project directory workflow definition.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/generateWorkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a workflow project directory — generateWorkflow","text":"","code":"generateWorkflow(workflow, start = TRUE)  # S4 method for Workflow generateWorkflow(workflow, start = TRUE)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/generateWorkflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a workflow project directory — generateWorkflow","text":"workflow S4 object class Workflow start TRUE/FALSE. Automatically activate project new RStudio session creation","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/generateWorkflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a workflow project directory — generateWorkflow","text":"","code":"if (FALSE) { file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project')                                        generateWorkflow(workflow_definition) }"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise the workflow targets — glimpse","title":"Visualise the workflow targets — glimpse","text":"Visualise directed acyclic graph workflow's targets.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise the workflow targets — glimpse","text":"","code":"glimpse(x)  # S4 method for Workflow glimpse(x)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/glimpse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise the workflow targets — glimpse","text":"x S4 object class Workflow","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise the workflow targets — glimpse","text":"","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project')                   glimpse(workflow_definition)  {\"x\":{\"nodes\":{\"name\":[\"plot_TIC\",\"export_correlations\",\"results_correlations\",\"mzML\",\"plot_supervised_RF\",\"plot_chromatogram\",\"report\",\"plot_unsupervised_RF\",\"export_correlations_files\",\"results_spectral_processing\",\"sample_information_file\",\"results_molecular_formula_assignment\",\"export_processed_data\",\"results_modelling\",\"mzML_files\",\"sample_information\",\"export_pre_treatment_sample_info\",\"summary_explanatory_features\",\"plot_PCA\",\"export_processed_data_files\",\"plot_fingerprint\",\"parameters_pre_treatment\",\"plot_centrality_dist\",\"summary_model_metrics\",\"summary_assignments\",\"export_modelling_files\",\"plot_explanatory_heatmap\",\"file_paths_list\",\"assigned_data\",\"export_pre_treatment\",\"summary_processed_features\",\"plot_LDA\",\"export_assignments_files\",\"results_pre_treatment\",\"parameters_spectral_processing\",\"plot_purity_dist\",\"export_modelling\",\"parameters_modelling\",\"export_assignments\",\"parameters_correlations\",\"parameters_molecular_formula_assignment\",\"summary_correlations\"],\"type\":[\"stem\",\"pattern\",\"stem\",\"pattern\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"pattern\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"stem\",\"pattern\",\"stem\",\"pattern\",\"stem\",\"stem\",\"stem\"],\"status\":[\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"],\"seconds\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"bytes\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"branches\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"id\":[\"plot_TIC\",\"export_correlations\",\"results_correlations\",\"mzML\",\"plot_supervised_RF\",\"plot_chromatogram\",\"report\",\"plot_unsupervised_RF\",\"export_correlations_files\",\"results_spectral_processing\",\"sample_information_file\",\"results_molecular_formula_assignment\",\"export_processed_data\",\"results_modelling\",\"mzML_files\",\"sample_information\",\"export_pre_treatment_sample_info\",\"summary_explanatory_features\",\"plot_PCA\",\"export_processed_data_files\",\"plot_fingerprint\",\"parameters_pre_treatment\",\"plot_centrality_dist\",\"summary_model_metrics\",\"summary_assignments\",\"export_modelling_files\",\"plot_explanatory_heatmap\",\"file_paths_list\",\"assigned_data\",\"export_pre_treatment\",\"summary_processed_features\",\"plot_LDA\",\"export_assignments_files\",\"results_pre_treatment\",\"parameters_spectral_processing\",\"plot_purity_dist\",\"export_modelling\",\"parameters_modelling\",\"export_assignments\",\"parameters_correlations\",\"parameters_molecular_formula_assignment\",\"summary_correlations\"],\"label\":[\"plot_TIC\",\"export_correlations\",\"results_correlations\",\"mzML\",\"plot_supervised_RF\",\"plot_chromatogram\",\"report\",\"plot_unsupervised_RF\",\"export_correlations_files\",\"results_spectral_processing\",\"sample_information_file\",\"results_molecular_formula_assignment\",\"export_processed_data\",\"results_modelling\",\"mzML_files\",\"sample_information\",\"export_pre_treatment_sample_info\",\"summary_explanatory_features\",\"plot_PCA\",\"export_processed_data_files\",\"plot_fingerprint\",\"parameters_pre_treatment\",\"plot_centrality_dist\",\"summary_model_metrics\",\"summary_assignments\",\"export_modelling_files\",\"plot_explanatory_heatmap\",\"file_paths_list\",\"assigned_data\",\"export_pre_treatment\",\"summary_processed_features\",\"plot_LDA\",\"export_assignments_files\",\"results_pre_treatment\",\"parameters_spectral_processing\",\"plot_purity_dist\",\"export_modelling\",\"parameters_modelling\",\"export_assignments\",\"parameters_correlations\",\"parameters_molecular_formula_assignment\",\"summary_correlations\"],\"level\":[6,12,10,3,8,6,13,8,11,5,1,8,7,11,2,2,8,12,8,6,6,6,6,12,9,12,12,1,9,8,6,8,9,7,4,6,13,10,10,1,1,11],\"color\":[\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\"],\"shape\":[\"dot\",\"square\",\"dot\",\"square\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"square\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"square\",\"dot\",\"square\",\"dot\",\"dot\",\"dot\"]},\"edges\":{\"from\":[\"results_spectral_processing\",\"export_correlations_files\",\"assigned_data\",\"parameters_correlations\",\"mzML_files\",\"results_pre_treatment\",\"results_spectral_processing\",\"parameters_correlations\",\"parameters_modelling\",\"parameters_molecular_formula_assignment\",\"parameters_pre_treatment\",\"parameters_spectral_processing\",\"plot_centrality_dist\",\"plot_chromatogram\",\"plot_explanatory_heatmap\",\"plot_fingerprint\",\"plot_LDA\",\"plot_PCA\",\"plot_purity_dist\",\"plot_supervised_RF\",\"plot_TIC\",\"plot_unsupervised_RF\",\"results_correlations\",\"results_modelling\",\"results_molecular_formula_assignment\",\"results_pre_treatment\",\"results_spectral_processing\",\"summary_assignments\",\"summary_correlations\",\"summary_explanatory_features\",\"summary_model_metrics\",\"summary_processed_features\",\"results_pre_treatment\",\"results_correlations\",\"mzML\",\"parameters_spectral_processing\",\"sample_information\",\"parameters_molecular_formula_assignment\",\"results_pre_treatment\",\"export_processed_data_files\",\"assigned_data\",\"parameters_modelling\",\"file_paths_list\",\"sample_information_file\",\"results_pre_treatment\",\"results_modelling\",\"results_pre_treatment\",\"results_spectral_processing\",\"results_spectral_processing\",\"results_spectral_processing\",\"results_spectral_processing\",\"results_modelling\",\"results_molecular_formula_assignment\",\"results_modelling\",\"results_modelling\",\"results_molecular_formula_assignment\",\"results_pre_treatment\",\"results_pre_treatment\",\"results_spectral_processing\",\"results_pre_treatment\",\"results_molecular_formula_assignment\",\"parameters_pre_treatment\",\"results_spectral_processing\",\"mzML\",\"results_spectral_processing\",\"export_modelling_files\",\"assigned_data\",\"export_assignments_files\",\"results_correlations\"],\"to\":[\"plot_TIC\",\"export_correlations\",\"results_correlations\",\"results_correlations\",\"mzML\",\"plot_supervised_RF\",\"plot_chromatogram\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"report\",\"plot_unsupervised_RF\",\"export_correlations_files\",\"results_spectral_processing\",\"results_spectral_processing\",\"results_spectral_processing\",\"results_molecular_formula_assignment\",\"results_molecular_formula_assignment\",\"export_processed_data\",\"results_modelling\",\"results_modelling\",\"mzML_files\",\"sample_information\",\"export_pre_treatment_sample_info\",\"summary_explanatory_features\",\"plot_PCA\",\"export_processed_data_files\",\"plot_fingerprint\",\"parameters_pre_treatment\",\"plot_centrality_dist\",\"summary_model_metrics\",\"summary_assignments\",\"export_modelling_files\",\"plot_explanatory_heatmap\",\"assigned_data\",\"assigned_data\",\"export_pre_treatment\",\"summary_processed_features\",\"plot_LDA\",\"export_assignments_files\",\"results_pre_treatment\",\"results_pre_treatment\",\"parameters_spectral_processing\",\"plot_purity_dist\",\"export_modelling\",\"parameters_modelling\",\"export_assignments\",\"summary_correlations\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Stem\",\"Pattern\"],\"shape\":[\"dot\",\"square\"],\"color\":[\"#899DA4\",\"#899DA4\"]},\"nodesToDataframe\":true}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputFilePath.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow input using file paths — inputFilePath","title":"Workflow input using file paths — inputFilePath","text":"Use file paths .mzML data files workflow input.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputFilePath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow input using file paths — inputFilePath","text":"","code":"inputFilePath(file_paths, sample_information)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputFilePath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow input using file paths — inputFilePath","text":"file_paths character vector .mzML file paths sample_information tibble containing sample information. See details specifications","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputFilePath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Workflow input using file paths — inputFilePath","text":"S4 object class FilePathInput.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputFilePath.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Workflow input using file paths — inputFilePath","text":"tibble containing sample information least contain following columns: fileOrder - numeric file order input files order alphabetically returned list.files(). injOrder - sample injection order MS analysis fileName - sample file name batch - analytical batch number block - randomised block number name - sample name class - sample class name","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputFilePath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow input using file paths — inputFilePath","text":"","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_input #> File path workflow input #> # files: 68"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputGrover.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow input using a grover API — inputGrover","title":"Workflow input using a grover API — inputGrover","text":"Use .mzML files retrieved grover API workflow input.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputGrover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow input using a grover API — inputGrover","text":"","code":"inputGrover(instrument, directory, host, port, auth)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputGrover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow input using a grover API — inputGrover","text":"instrument analytical instrument name directory experiment directory name host grover API host address port grover API host port auth grover API host authentication code","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputGrover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Workflow input using a grover API — inputGrover","text":"S4 object class GroverInput","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputGrover.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Workflow input using a grover API — inputGrover","text":"specifies retrieval sample data files information using grover API. See grover information mass spectral data retrieval grover API.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/inputGrover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow input using a grover API — inputGrover","text":"","code":"workflow_input <- inputGrover(instrument = 'An_instrument',                               directory = 'Experiment_directory',                               host = 'a.grover.host',                               port = 80,                               auth = '1234')  workflow_input #> Grover API workflow input  #> Instrument: An_instrument  #> Directory: Experiment_directory  #> Host: a.grover.host  #> Port: 80  #> Authentication: 1234"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow definition target information — manifest","title":"Workflow definition target information — manifest","text":"Return tibble information targets workflow definition.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow definition target information — manifest","text":"","code":"manifest(x)  # S4 method for Workflow manifest(x)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow definition target information — manifest","text":"x S4 object class Workflow","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow definition target information — manifest","text":"","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project')                   manifest(workflow_definition) #> # A tibble: 42 × 3 #>    name                                    command                       pattern #>    <chr>                                   <chr>                         <chr>   #>  1 parameters_correlations                 \"metabolyseR::analysisParame… NA      #>  2 parameters_molecular_formula_assignment \"MFassign::assignmentParamet… NA      #>  3 sample_information_file                 \"\\\"data/runinfo.csv\\\"\"        NA      #>  4 file_paths_list                         \"\\\"data/file_paths.txt\\\"\"     NA      #>  5 sample_information                      \"readr::read_csv(sample_info… NA      #>  6 mzML_files                              \"readLines(file_paths_list)\"  NA      #>  7 mzML                                    \"mzML_files\"                  map(mz… #>  8 parameters_spectral_processing          \"binneR::detectParameters(mz… NA      #>  9 results_spectral_processing             \"binneR::binneRlyse(mzML, sa… NA      #> 10 plot_TIC                                \"binneR::plotTIC(results_spe… NA      #> # … with 32 more rows"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/target.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a workflow target definition — target","title":"Create a workflow target definition — target","text":"Create workflow target definition.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a workflow target definition — target","text":"","code":"target(   name,   command,   type = \"tar_target\",   args = list(),   comment = character() )"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a workflow target definition — target","text":"name target name command R command run target type target archetype args list arguments pass specified target archetype comment optional comment precedes target code","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a workflow target definition — target","text":"S4 object class Target.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/target.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a workflow target definition — target","text":"Target types can one provided targets tarchetypes packages.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a workflow target definition — target","text":"","code":"workflow_target <- target('a_target',                           1 + 1,                           args = list(memory = 'persistent'),                            comment = 'A target')  workflow_target #> ## A target #> tar_target( #>   a_target, #>   1 + 1, #>   memory = \"persistent\" #> )"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/targetsWorkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow pipeline targets — targetsWorkflow","title":"Workflow pipeline targets — targetsWorkflow","text":"Target definitions workflow input.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/targetsWorkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow pipeline targets — targetsWorkflow","text":"","code":"targetsWorkflow(x)  # S4 method for Workflow targetsWorkflow(x)  targetsInput(x)  # S4 method for FilePathInput targetsInput(x)  # S4 method for GroverInput targetsInput(x)  # S4 method for Workflow targetsInput(x)  targetsSpectralProcessing(x)  targetsPretreatment(x)  targetsMFassignment(x)  targetsModelling(x)  targetsCorrelations(x)  targetsReport(x)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/targetsWorkflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow pipeline targets — targetsWorkflow","text":"x workflow type S4 object class Workflow, FilePathInput GroverInput","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/targetsWorkflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Workflow pipeline targets — targetsWorkflow","text":"list Target S4 class target definitions.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/targetsWorkflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow pipeline targets — targetsWorkflow","text":"","code":"## Full workflow example file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                      'FIE-HRMS fingerprinting',                                      'Example project')  targetsWorkflow(workflow_definition) #> $input #> $input$file_paths_list #> ## Retrieve data file paths #> tar_file( #>   file_paths_list, #>   \"data/file_paths.txt\" #> ) #>  #> $input$mzML #> ## Track individual data files #> tar_files( #>   mzML, #>   readLines(file_paths_list) #> ) #>  #> $input$sample_information_file #> ## Sample information file path #> tar_file( #>   sample_information_file, #>   \"data/runinfo.csv\" #> ) #>  #> $input$sample_information #> ## Parse sample information #> tar_target( #>   sample_information, #>   readr::read_csv(sample_information_file) #> ) #>  #>  #> $spectral_processing #> $spectral_processing$parameters_spectral_processing #> ## Detect spectral binning parameters #> tar_target( #>   parameters_spectral_processing, #>   binneR::detectParameters(mzML) #> ) #>  #> $spectral_processing$results_spectral_processing #> ## Perform spectral binning #> tar_target( #>   results_spectral_processing, #>   binneR::binneRlyse(mzML, sample_information, parameters_spectral_processing) #> ) #>  #> $spectral_processing$plot_chromatogram #> ## Plot average infusion chromatogram #> tar_target( #>   plot_chromatogram, #>   binneR::plotChromatogram(results_spectral_processing) #> ) #>  #> $spectral_processing$plot_fingerprint #> ## Plot average spectrum fingerprint #> tar_target( #>   plot_fingerprint, #>   binneR::plotFingerprint(results_spectral_processing) #> ) #>  #> $spectral_processing$plot_TIC #> ## Plot sample total ion counts by randomised block #> tar_target( #>   plot_TIC, #>   binneR::plotTIC(results_spectral_processing) #> ) #>  #> $spectral_processing$plot_purity_dist #> ## Plot bin purity distribution #> tar_target( #>   plot_purity_dist, #>   binneR::plotPurity(results_spectral_processing) #> ) #>  #> $spectral_processing$plot_centrality_dist #> ## Plot bin centrality distribution #> tar_target( #>   plot_centrality_dist, #>   binneR::plotCentrality(results_spectral_processing) #> ) #>  #> $spectral_processing$summary_processed_features #> ## Summary of spectrally binned features #> tar_target( #>   summary_processed_features, #>   metaboMisc::featureSummary(results_spectral_processing) #> ) #>  #> $spectral_processing$export_processed_data #> ## Export spectrally binned data #> tar_files( #>   export_processed_data, #>   metaboMisc::export(results_spectral_processing, outPath = \"exports/spectral_processing\") #> ) #>  #>  #> $pre_treatment #> $pre_treatment$parameters_pre_treatment #> ## Detect pre-treatment routine parameters #> tar_target( #>   parameters_pre_treatment, #>   metaboMisc::detectPretreatmentParameters(results_spectral_processing) #> ) #>  #> $pre_treatment$results_pre_treatment #> ## Perform data pre-treatment #> tar_target( #>   results_pre_treatment, #>   metaboMisc::preTreatModes(results_spectral_processing, parameters_pre_treatment) #> ) #>  #> $pre_treatment$export_pre_treatment_data #> ## Export pre-treated data #> tar_file( #>   export_pre_treatment, #>   metaboMisc::exportData(results_pre_treatment, #>     type = \"pre-treated\", #>     outPath = \"exports/pre-treated\" #>   ) #> ) #>  #> $pre_treatment$export_pre_treatment_sample_info #> ## Export sample information of pre-treated data #> tar_file( #>   export_pre_treatment_sample_info, #>   metaboMisc::exportSampleInfo(results_pre_treatment, #>     type = \"pre-treated\", #>     outPath = \"exports/pre-treated\" #>   ) #> ) #>  #> $pre_treatment$plot_PCA #> ## Plot Principle Component Analysis #> tar_target( #>   plot_PCA, #>   metabolyseR::plotPCA(results_pre_treatment, type = \"pre-treated\") #> ) #>  #> $pre_treatment$plot_LDA #> ## Plot Priniciple Component Analysis - Linear Discriminant Analysis #> tar_target( #>   plot_LDA, #>   metabolyseR::plotLDA(results_pre_treatment, type = \"pre-treated\") #> ) #>  #> $pre_treatment$plot_unsupervised_RF #> ## Plot multidimensional scaling plot of unsupervised random forest #> tar_target( #>   plot_unsupervised_RF, #>   metabolyseR::plotUnsupervisedRF(results_pre_treatment, #>     type = \"pre-treated\", #>     title = \"Unsupervised random forest\" #>   ) #> ) #>  #> $pre_treatment$plot_supervised_RF #> ## Plot multidimensional scaling plot of supervised random forest #> tar_target( #>   plot_supervised_RF, #>   metabolyseR::plotSupervisedRF(results_pre_treatment, #>     type = \"pre-treated\", #>     title = \"Supervised random forest\" #>   ) #> ) #>  #>  #> $molecular_formula_assignment #> $molecular_formula_assignment$parameters_molecular_formula_assignment #> ## Generate molecular formula assignment parameters #> tar_target( #>   parameters_molecular_formula_assignment, #>   MFassign::assignmentParameters(\"FIE\") #> ) #>  #> $molecular_formula_assignment$results_molecular_formula_assignment #> ## Perform molecular formula assignment #> tar_target( #>   results_molecular_formula_assignment, #>   results_pre_treatment %>% metabolyseR::dat(type = \"pre-treated\") %>% #>     MFassign::assignMFs(parameters_molecular_formula_assignment) #> ) #>  #> $molecular_formula_assignment$assigned_data #> ## Retieve pre-treated data with molecular formula assignments added to the feature names #> tar_target( #>   assigned_data, #>   metaboMisc::addAssignments(results_pre_treatment, results_molecular_formula_assignment) #> ) #>  #> $molecular_formula_assignment$summary_assignments #> ## Summarise the assigned molecular formulas #> tar_target( #>   summary_assignments, #>   MFassign::summariseAssignment(results_molecular_formula_assignment) #> ) #>  #> $molecular_formula_assignment$export_assignments #> ## Export molecular formula assignments #> tar_files( #>   export_assignments, #>   metaboMisc::export(results_molecular_formula_assignment, outPath = \"exports/molecular_formula_assignments\") #> ) #>  #>  #> $modelling #> $modelling$parameters_modelling #> ## Detect appropriate modelling parameters #> tar_target( #>   parameters_modelling, #>   metaboMisc::detectModellingParameters(assigned_data, cls = \"class\") #> ) #>  #> $modelling$results_modelling #> ## Perform modelling #> tar_target( #>   results_modelling, #>   metabolyseR::reAnalyse(assigned_data, parameters_modelling) #> ) #>  #> $modelling$summary_modelling_metrics #> ## Retrieve modelling metrics #> tar_target( #>   summary_model_metrics, #>   metabolyseR::metrics(results_modelling) #> ) #>  #> $modelling$summary_explanatory_features #> ## Retireve modelling explanatory features #> tar_target( #>   summary_explanatory_features, #>   metabolyseR::explanatoryFeatures(results_modelling) #> ) #>  #> $modelling$plot_explanatory_heatmap #> ## Plot a heat map of explanatory features #> tar_target( #>   plot_explanatory_heatmap, #>   metabolyseR::plotExplanatoryHeatmap(results_modelling) #> ) #>  #> $modelling$export_modelling #> ## Export results_modelling results #> tar_files( #>   export_modelling, #>   metaboMisc::exportModelling(results_modelling, outPath = \"exports/results_modelling\") #> ) #>  #>  #> $correlations #> $correlations$parameters_correlations #> ## Generate parameters for correlation analysis #> tar_target( #>   parameters_correlations, #>   metabolyseR::analysisParameters(\"correlations\") #> ) #>  #> $correlations$results_correlations #> ## Perform correlation analysis #> tar_target( #>   results_correlations, #>   metabolyseR::reAnalyse(assigned_data, parameters_correlations) #> ) #>  #> $correlations$summary_correlations #> ## Retrieve correlation analysis results #> tar_target( #>   summary_correlations, #>   metabolyseR::analysisResults(results_correlations, \"correlations\") #> ) #>  #> $correlations$export_correlations #> ## Export correlation analysis results #> tar_files( #>   export_correlations, #>   metaboMisc::exportCorrelations(results_correlations, outPath = \"exports/correlations\") #> ) #>  #>  #> $report #> $report$report #> tar_render( #>   report, #>   \"report/report.Rmd\", #>   output_dir = \"exports\" #> ) #>  #>   ## Examples for individual modules targetsSpectralProcessing('FIE-HRMS fingerprinting') #> $parameters_spectral_processing #> ## Detect spectral binning parameters #> tar_target( #>   parameters_spectral_processing, #>   binneR::detectParameters(mzML) #> ) #>  #> $results_spectral_processing #> ## Perform spectral binning #> tar_target( #>   results_spectral_processing, #>   binneR::binneRlyse(mzML, sample_information, parameters_spectral_processing) #> ) #>  #> $plot_chromatogram #> ## Plot average infusion chromatogram #> tar_target( #>   plot_chromatogram, #>   binneR::plotChromatogram(results_spectral_processing) #> ) #>  #> $plot_fingerprint #> ## Plot average spectrum fingerprint #> tar_target( #>   plot_fingerprint, #>   binneR::plotFingerprint(results_spectral_processing) #> ) #>  #> $plot_TIC #> ## Plot sample total ion counts by randomised block #> tar_target( #>   plot_TIC, #>   binneR::plotTIC(results_spectral_processing) #> ) #>  #> $plot_purity_dist #> ## Plot bin purity distribution #> tar_target( #>   plot_purity_dist, #>   binneR::plotPurity(results_spectral_processing) #> ) #>  #> $plot_centrality_dist #> ## Plot bin centrality distribution #> tar_target( #>   plot_centrality_dist, #>   binneR::plotCentrality(results_spectral_processing) #> ) #>  #> $summary_processed_features #> ## Summary of spectrally binned features #> tar_target( #>   summary_processed_features, #>   metaboMisc::featureSummary(results_spectral_processing) #> ) #>  #> $export_processed_data #> ## Export spectrally binned data #> tar_files( #>   export_processed_data, #>   metaboMisc::export(results_spectral_processing, outPath = \"exports/spectral_processing\") #> ) #>  targetsInput(workflow_input) #> $file_paths_list #> ## Retrieve data file paths #> tar_file( #>   file_paths_list, #>   \"data/file_paths.txt\" #> ) #>  #> $mzML #> ## Track individual data files #> tar_files( #>   mzML, #>   readLines(file_paths_list) #> ) #>  #> $sample_information_file #> ## Sample information file path #> tar_file( #>   sample_information_file, #>   \"data/runinfo.csv\" #> ) #>  #> $sample_information #> ## Parse sample information #> tar_target( #>   sample_information, #>   readr::read_csv(sample_information_file) #> ) #>  targetsPretreatment('FIE-HRMS fingerprinting') #> $parameters_pre_treatment #> ## Detect pre-treatment routine parameters #> tar_target( #>   parameters_pre_treatment, #>   metaboMisc::detectPretreatmentParameters(results_spectral_processing) #> ) #>  #> $results_pre_treatment #> ## Perform data pre-treatment #> tar_target( #>   results_pre_treatment, #>   metaboMisc::preTreatModes(results_spectral_processing, parameters_pre_treatment) #> ) #>  #> $export_pre_treatment_data #> ## Export pre-treated data #> tar_file( #>   export_pre_treatment, #>   metaboMisc::exportData(results_pre_treatment, #>     type = \"pre-treated\", #>     outPath = \"exports/pre-treated\" #>   ) #> ) #>  #> $export_pre_treatment_sample_info #> ## Export sample information of pre-treated data #> tar_file( #>   export_pre_treatment_sample_info, #>   metaboMisc::exportSampleInfo(results_pre_treatment, #>     type = \"pre-treated\", #>     outPath = \"exports/pre-treated\" #>   ) #> ) #>  #> $plot_PCA #> ## Plot Principle Component Analysis #> tar_target( #>   plot_PCA, #>   metabolyseR::plotPCA(results_pre_treatment, type = \"pre-treated\") #> ) #>  #> $plot_LDA #> ## Plot Priniciple Component Analysis - Linear Discriminant Analysis #> tar_target( #>   plot_LDA, #>   metabolyseR::plotLDA(results_pre_treatment, type = \"pre-treated\") #> ) #>  #> $plot_unsupervised_RF #> ## Plot multidimensional scaling plot of unsupervised random forest #> tar_target( #>   plot_unsupervised_RF, #>   metabolyseR::plotUnsupervisedRF(results_pre_treatment, #>     type = \"pre-treated\", #>     title = \"Unsupervised random forest\" #>   ) #> ) #>  #> $plot_supervised_RF #> ## Plot multidimensional scaling plot of supervised random forest #> tar_target( #>   plot_supervised_RF, #>   metabolyseR::plotSupervisedRF(results_pre_treatment, #>     type = \"pre-treated\", #>     title = \"Supervised random forest\" #>   ) #> ) #>  targetsMFassignment('FIE-HRMS fingerprinting') #> $parameters_molecular_formula_assignment #> ## Generate molecular formula assignment parameters #> tar_target( #>   parameters_molecular_formula_assignment, #>   MFassign::assignmentParameters(\"FIE\") #> ) #>  #> $results_molecular_formula_assignment #> ## Perform molecular formula assignment #> tar_target( #>   results_molecular_formula_assignment, #>   results_pre_treatment %>% metabolyseR::dat(type = \"pre-treated\") %>% #>     MFassign::assignMFs(parameters_molecular_formula_assignment) #> ) #>  #> $assigned_data #> ## Retieve pre-treated data with molecular formula assignments added to the feature names #> tar_target( #>   assigned_data, #>   metaboMisc::addAssignments(results_pre_treatment, results_molecular_formula_assignment) #> ) #>  #> $summary_assignments #> ## Summarise the assigned molecular formulas #> tar_target( #>   summary_assignments, #>   MFassign::summariseAssignment(results_molecular_formula_assignment) #> ) #>  #> $export_assignments #> ## Export molecular formula assignments #> tar_files( #>   export_assignments, #>   metaboMisc::export(results_molecular_formula_assignment, outPath = \"exports/molecular_formula_assignments\") #> ) #>  targetsModelling('FIE-HRMS fingerprinting') #> $parameters_modelling #> ## Detect appropriate modelling parameters #> tar_target( #>   parameters_modelling, #>   metaboMisc::detectModellingParameters(assigned_data, cls = \"class\") #> ) #>  #> $results_modelling #> ## Perform modelling #> tar_target( #>   results_modelling, #>   metabolyseR::reAnalyse(assigned_data, parameters_modelling) #> ) #>  #> $summary_modelling_metrics #> ## Retrieve modelling metrics #> tar_target( #>   summary_model_metrics, #>   metabolyseR::metrics(results_modelling) #> ) #>  #> $summary_explanatory_features #> ## Retireve modelling explanatory features #> tar_target( #>   summary_explanatory_features, #>   metabolyseR::explanatoryFeatures(results_modelling) #> ) #>  #> $plot_explanatory_heatmap #> ## Plot a heat map of explanatory features #> tar_target( #>   plot_explanatory_heatmap, #>   metabolyseR::plotExplanatoryHeatmap(results_modelling) #> ) #>  #> $export_modelling #> ## Export results_modelling results #> tar_files( #>   export_modelling, #>   metaboMisc::exportModelling(results_modelling, outPath = \"exports/results_modelling\") #> ) #>  targetsCorrelations('FIE-HRMS fingerprinting') #> $parameters_correlations #> ## Generate parameters for correlation analysis #> tar_target( #>   parameters_correlations, #>   metabolyseR::analysisParameters(\"correlations\") #> ) #>  #> $results_correlations #> ## Perform correlation analysis #> tar_target( #>   results_correlations, #>   metabolyseR::reAnalyse(assigned_data, parameters_correlations) #> ) #>  #> $summary_correlations #> ## Retrieve correlation analysis results #> tar_target( #>   summary_correlations, #>   metabolyseR::analysisResults(results_correlations, \"correlations\") #> ) #>  #> $export_correlations #> ## Export correlation analysis results #> tar_files( #>   export_correlations, #>   metaboMisc::exportCorrelations(results_correlations, outPath = \"exports/correlations\") #> ) #>"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a workflow definition — validate","title":"Validate a workflow definition — validate","text":"Validate workflow definition, checking issues. error warning returned problem detected.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a workflow definition — validate","text":"","code":"validate(x)  # S4 method for Workflow validate(x)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a workflow definition — validate","text":"x S4 object class Workflow","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a workflow definition — validate","text":"","code":"file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                       'FIE-HRMS fingerprinting',                                       'Example project')                   validate(workflow_definition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/workflow-edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit workflow targets and modules — moduleReplace","title":"Edit workflow targets and modules — moduleReplace","text":"Edit targets workflow definition.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/workflow-edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit workflow targets and modules — moduleReplace","text":"","code":"moduleReplace(x, module, replacement)  # S4 method for Workflow moduleReplace(x, module, replacement)  modulesRemove(x, modules)  # S4 method for Workflow modulesRemove(x, modules)  modulesKeep(x, modules)  # S4 method for Workflow modulesKeep(x, modules)  moduleAdd(x, module, addition)  # S4 method for Workflow moduleAdd(x, module, addition)  targetReplace(x, module, target, replacement)  # S4 method for Workflow targetReplace(x, module, target, replacement)  targetRemove(x, module, target)  # S4 method for Workflow targetRemove(x, module, target)  targetAdd(x, module, target, addition)  # S4 method for Workflow targetAdd(x, module, target, addition)"},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/workflow-edit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit workflow targets and modules — moduleReplace","text":"x S4 object class Workflow module workflow module name replacement replacement workflow module target modules character vector module names addition workflow module target add target workflow target name","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/workflow-edit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edit workflow targets and modules — moduleReplace","text":"S4 object class Workflow edited targets","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/reference/workflow-edit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit workflow targets and modules — moduleReplace","text":"","code":"## Define a workflow file_paths <- metaboData::filePaths('FIE-HRMS','BdistachyonEcotypes') sample_information <- metaboData::runinfo('FIE-HRMS','BdistachyonEcotypes')  workflow_input <- inputFilePath(file_paths,sample_information)  workflow_definition <- defineWorkflow(workflow_input,                                      'FIE-HRMS fingerprinting',                                      'Example project')                                       ## Add a module workflow_definition <- moduleAdd(workflow_definition,                                  'additional_module',                                  list(new_target = target('new_target','1 + 1'))) ## Replace the additional module workflow_definition <- moduleReplace(workflow_definition,                                      'additional_module',                                      list(replacement_target = target('replacement_target',                                      '1 + 2'))) ## Remove the additional module workflow_definition <- modulesRemove(workflow_definition,                                     'additional_module')  ## Add a target to the input module workflow_definition <- targetAdd(workflow_definition,                                  'input',                                  'new_target',                                  target('new_target','1 + 1')) ## Replace the additional target workflow_definition <- targetReplace(workflow_definition,                                  'input',                                  'new_target',                                  target('new_target','1 + 2'))  ## Remove the additional target workflow_definition <- targetRemove(workflow_definition,                                  'input',                                  'new_target')"},{"path":"https://jasenfinch.github.io/metaboWorkflows/news/index.html","id":"metaboworkflows-095","dir":"Changelog","previous_headings":"","what":"metaboWorkflows 0.9.5","title":"metaboWorkflows 0.9.5","text":"correct sample information table now exported pre-treated data.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/news/index.html","id":"metaboworkflows-094","dir":"Changelog","previous_headings":"","what":"metaboWorkflows 0.9.4","title":"metaboWorkflows 0.9.4","text":"Plotting summary targets added spectral processing module profiling workflows. Script edited header added generated R/utils.R file. Added prettycode package suggests.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/news/index.html","id":"metaboworkflows-093","dir":"Changelog","previous_headings":"","what":"metaboWorkflows 0.9.3","title":"metaboWorkflows 0.9.3","text":"workflow parallel options now set R/utils.R. targets \"transient\" memory option now set targets tar_options_set() R/utils.R. Updated package introduction vignette include setting package options R/utils.R.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/news/index.html","id":"metaboworkflows-092","dir":"Changelog","previous_headings":"","what":"metaboWorkflows 0.9.2","title":"metaboWorkflows 0.9.2","text":"Renamed relevant targets prefixes results parameters. R Markdown output report chunks now also include targets prefixes results parameters. Captions summary tables R Markdown report output generated target name. Modelling feature importance target now replaced modelling explanatory features target. Fixed typo R Markdown report output footer. Project scripts generated projecttemplates edited metaboWorkflows now include header comment denoting version package used. Targets workflow modules now written individual scripts within project R/targets directory. scripts sourced _targets.R. Updated usage vignettes relevant changes.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/news/index.html","id":"metaboworkflows-091","dir":"Changelog","previous_headings":"","what":"metaboWorkflows 0.9.1","title":"metaboWorkflows 0.9.1","text":"Added titles supervised unsupervised random forest MDS plots. rawrr package now install now directed Bioconductor renv initialisation.","code":""},{"path":"https://jasenfinch.github.io/metaboWorkflows/news/index.html","id":"metaboworkflows-090","dir":"Changelog","previous_headings":"","what":"metaboWorkflows 0.9.0","title":"metaboWorkflows 0.9.0","text":"Added NEWS.md file track changes package. package website now available https://jasenfinch.github.io/metaboWorkflows/. package can now used firstly define workflow generate project template directory facilitates reproducible analysis powered use targets package, renv, git docker. choice workflow data inputs now available include file paths converted data file retrieval grover web API. Workflows can defined using defineWorkflow() based workflow input type metabolomic technique, also enabling selection project template parameters. Workflow definitions can modified detailed Workflow customisation extension vignette. Project directories workflow definitions can generated using generateWorkflow(). Introduction vignette updated detail new package functionality.","code":""}]
